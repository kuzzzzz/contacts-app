{"version":3,"sources":["Contact.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","props","useState","showAge","setShowAge","className","src","avatar","alt","name","email","onClick","age","App","contacts","setContacts","useEffect","fetch","then","res","json","data","results","map","contact","Contact","picture","large","first","last","dob","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qPAoBeA,G,KAjBK,SAACC,GAAW,IAAD,EAEEC,oBAAS,GAFX,mBAErBC,EAFqB,KAEZC,EAFY,KAG3B,OACE,yBAAKC,UAAU,gBACb,yBAAKC,IAAKL,EAAMM,OAAQC,IAAI,YAC5B,yBAAKH,UAAU,gBACnB,oCAAUJ,EAAMQ,MAChB,qCAAWR,EAAMS,OAEX,4BAAQC,QAAS,kBAAMP,GAAYD,KAAnC,cACLA,GAAW,kCAAQF,EAAMW,SC6CfC,EAvDH,WACV,IADgB,EAwBgBX,mBAAS,IAxBzB,mBAwBTY,EAxBS,KAwBCC,EAxBD,KAiChB,OAPAC,qBAAU,WACRC,MAAM,wCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,EAAYM,EAAKC,cAEpB,IAED,oCAjCoB,CACpB,CACEf,OACE,qKACFE,KAAM,gBACNC,MAAO,wBACPE,IAAK,IAEP,CACEL,OACE,gFACFE,KAAM,UACNC,MAAO,yBACPE,IAAK,IAEP,CACEL,OACE,qKACFE,KAAM,iBACNC,MAAO,sBACPE,IAAK,KAcUW,KAAI,SAAAC,GAAO,OACxB,kBAACC,EAAD,CACElB,OAAQiB,EAAQjB,OAChBE,KAAMe,EAAQf,KACdC,MAAOc,EAAQd,MACfE,IAAKY,EAAQZ,SAGhBE,EAASS,KAAI,SAAAC,GAAO,OACnB,kBAACC,EAAD,CACElB,OAAQiB,EAAQE,QAAQC,MACxBlB,KAAMe,EAAQf,KAAKmB,MAAQ,IAAMJ,EAAQf,KAAKoB,KAC9CnB,MAAOc,EAAQd,MACfE,IAAKY,EAAQM,IAAIlB,WCxCPmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9b65d88.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"./App.css\"\r\n\r\nconst ContactCard = (props) => {\r\n   \r\n    const[showAge, setShowAge] = useState(false)\r\n    return (\r\n      <div className=\"contact-card\">\r\n        <img src={props.avatar} alt=\"profile\" />\r\n        <div className=\"user-details\">\r\n    <p>Name: {props.name}</p>\r\n    <p>Email: {props.email}</p>\r\n\r\n          <button onClick={() => setShowAge(!showAge)}>Toggle Age</button>\r\n    {showAge && <p>Age:{props.age}</p>}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ContactCard","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ContactCard from \"./Contact\";\n\nconst App = () => {\n  const storedcontact = [\n    {\n      avatar:\n        \"https://media-exp1.licdn.com/dms/image/C5603AQGHHh-O8h0qPQ/profile-displayphoto-shrink_200_200/0?e=1597881600&v=beta&t=xo2BKzaFrAV_1KvMvh6D98WxAY8uCNBwB0rDWJuyP6A\",\n      name: \"Atumah Daniel\",\n      email: \"jenny.han@notreal.com\",\n      age: 23\n    },\n    {\n      avatar:\n        \"https://pbs.twimg.com/profile_images/1265578058947465216/RH7oINIU_400x400.jpg\",\n      name: \"Ceeynan\",\n      email: \"iamfabulouse@gmail.com\",\n      age: 23\n    },\n    {\n      avatar:\n        \"https://media-exp1.licdn.com/dms/image/C4D03AQHz37uf3Z-Jxw/profile-displayphoto-shrink_800_800/0?e=1597881600&v=beta&t=VTvxBDiLuY2zEz1AfoxGxNfG_DDWWoI1IQmrWtNBE2Y\",\n      name: \"Onome Nesimeye\",\n      email: \"pearlarel@gmail.com\",\n      age: 23\n    }\n  ];\n  const [contacts, setContacts] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://randomuser.me/api/?results=3\")\n      .then(res => res.json())\n      .then(data => {\n        setContacts(data.results);\n      });\n  }, []);\n  return (\n    <>\n      {storedcontact.map(contact => (\n        <ContactCard\n          avatar={contact.avatar}\n          name={contact.name}\n          email={contact.email}\n          age={contact.age}\n        />\n      ))}\n      {contacts.map(contact => (\n        <ContactCard\n          avatar={contact.picture.large}\n          name={contact.name.first + \" \" + contact.name.last}\n          email={contact.email}\n          age={contact.dob.age}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}